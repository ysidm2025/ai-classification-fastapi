from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from db_connection import fetch_conversation_by_id
from model import classify_conversation, store_classification_results

app = FastAPI()

# Define the request body model for conversation ID
class ConversationRequest(BaseModel):
    conversation_id: int

# Endpoint to fetch, process, and classify a conversation
@app.post("/process_and_classify_conversation/")
async def process_and_classify_conversation(request: ConversationRequest):
    conversation_id = request.conversation_id

    # Fetch and process conversation messages for the given ConversationId
    df_processed = fetch_conversation_by_id(conversation_id)

    if df_processed is None:
        raise HTTPException(status_code=404, detail="Conversation data could not be processed")

    if df_processed.empty:
        raise HTTPException(status_code=404, detail="Conversation not found")

    # Extract the user message and bot response from the processed DataFrame
    user_message = df_processed["UserMessage"].iloc[0]
    bot_response = df_processed["BotMessage"].iloc[0]
    
    # Classify the conversation using the classify_conversation function
    status, confidence_score = classify_conversation({"UserMessage": user_message, "BotMessage": bot_response})

    # Optionally, store the classification results in the database
    store_classification_results(conversation_id, status, confidence_score)

    # Return the classification results
    return {
        "conversation_id": conversation_id,
        "status": status,
        "confidence_score": confidence_score
    }
    
# Run with: uvicorn main:app --reload
